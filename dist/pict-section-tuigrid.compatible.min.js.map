{"version":3,"sources":["pict-section-tuigrid.compatible.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase-Preinit.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","node_modules/pict-view/source/Pict-View.js","source/Pict-Section-TuiGrid-DefaultConfiguration.json","source/Pict-Section-TuiGrid.js","source/Pict-TuiGrid-Editor-Number.js","source/Pict-TuiGrid-Editors.js","source/Pict-TuiGrid-Formatters.js","source/Pict-TuiGrid-Headers.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","writable","configurable","defineProperty","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_typeof","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","obj","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","Number","iterator","f","exports","module","define","amd","window","global","PictSectionTuigrid","r","n","t","c","require","u","a","Error","code","FableCoreServiceProviderBase","pOptions","pServiceHash","fable","options","serviceType","UUID","concat","Math","floor","random","Hash","pFable","FableServiceProviderBase","isFable","getUUID","log","servicesMap","services","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","InitializeOnLoad","RenderOnLoad","Templates","DefaultTemplates","Renderables","Manifests","PictView","_libFableServiceBase","_super","_this","tmpOptions","assign","JSON","parse","stringify","AppData","tmpTemplate","hasOwnProperty","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","renderables","tmpRenderable","RenderableHash","initialize","render","postInitialRenderInitialize","info","internalInitialize","pRenderable","pRenderDestinationAddress","pTemplateDataAddress","tmpRenderableHash","tmpRenderDestinationAddress","ContentDestinationAddress","tmpDataAddress","RecordAddress","tmpData","DataProvider","getDataByAddress","tmpContent","parseTemplateByHash","TemplateHash","ContentAssignment","assignContent","fCallback","_this2","pError","pContent","GridWidth","GridRowHeight","GridBodyHeight","GridBodyMinHeight","GridColumnMinWidth","GridColumnWidthResizable","GridColumnHeightResizable","GridColumnFrozenCount","GridColumnFrozenBorderWidth","GridScrollX","GridScrollY","GridShowDummyRows","GridDraggableRows","GridSelectionUnit","DestinationAddress","TargetElementAddress","GridDataAddress","GridData","idrecord","entity","name","description","ColumnsToSolveOnChange","TuiColumnSchema","header","PictTriggerSolveOnChange","editor","PictSectionTuiGrid","_libPictViewClass","_super2","_this3","_tuiGridPrototype","tuiGrid","customHeaders","customEditors","customFormatters","columnSchema","targetElementAddress","gridData","pTuiGridPrototype","trace","tui","Grid","connectTuiGridPrototype","pChangeData","tmpSolverNecessary","changes","tmpEntity","getValue","rowKey","tmpIDRecord","columnName","PictApplication","solve","_this4","tmpAddressedData","manifest","getValueByHash","tmpTargetElementSet","getElement","targetElement","tmpColumn","formatter","type","listItems","tmpListItems","Options","warn","libTuiGrid","data","el","columns","usageStatistics","scrollY","columnOptions","resizable","on","changeHandler","pCellColumnToBeSet","pCellValueToSet","pLookupValue","pLookupColumn","console","getData","setValue","pRowKey","default_configuration","tuiCustomEditorNumber","pProperties","tmpElement","document","createElement","decimalPrecision","columnInfo","oninput","pElement","tmpCastNumber","parseFloat","toFixed","toString","Element","select","tuiGridHeaders","EditorNumber","tuiGridFormatters","pCell","tmpCellValue","isNaN","FormatterTwoDigitNumber","tuiCustomColumnHeaderNone","CustomColumnHeaderNone"],"mappings":"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","file":"pict-section-tuigrid.compatible.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictSectionTuigrid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n\t\tthis.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n\tstatic isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t: ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t: {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\tif (typeof(pFable.getUUID) == 'function')\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.UUID = `NoFABLESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\n\t\t// Pull back a few things\n\t\tthis.log = this.fable.log;\n\t\tthis.servicesMap = this.fable.servicesMap;\n\t\tthis.services = this.fable.services;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');\n},{\"./Fable-ServiceProviderBase-Preinit.js\":1}],3:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: 'DEFAULT',\n\n\t\tInitializeOnLoad: true,\n\t\tRenderOnLoad: false,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tthis.serviceType = 'PictView';\n\n\t\t// Wire in the essential Pict service\n\t\tthis.AppData = this.fable.AppData;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\n\t\t\tif (!tmpRenderable.hasOwnProperty('RenderableHash') || !tmpRenderable.hasOwnProperty('TemplateHash'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable ${i} in the options array.`, tmpRenderable);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.InitializeOnLoad)\n\t\t{\n\t\t\tthis.initialize();\n\t\t}\n\t\tif (this.options.RenderOnLoad)\n\t\t{\n\t\t\tthis.render(this.options.DefaultRenderable, this.options.DefaultDestinationAddress, this.options.DefaultTemplateRecordAddress);\n\t\t\tthis.postInitialRenderInitialize();\n\t\t}\n\t}\n\n\tinternalInitialize()\n\t{\n\t\treturn true;\n\t}\n\n\tpostInitialRenderInitialize()\n\t{\n\t\treturn true;\n\t}\n\n\tinitialize()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\tthis.internalInitialize();\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\tlet tmpContent = this.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\t\treturn this.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t}\n\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\tthis.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t(pError, pContent) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\t\t\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\treturn fCallback(null, pContent);\n\t\t\t});\n\t}\n}\n\nmodule.exports = PictView;\n},{\"fable-serviceproviderbase\":2}],4:[function(require,module,exports){\nmodule.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n},{}],5:[function(require,module,exports){\nconst libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.customFormatters = require('./Pict-TuiGrid-Formatters.js');\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\t// Overload the connectTuiGrid() function to use the inline version of the TuiGrid\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\t//if (pChangeData.changes[i].columnName == 'some_important_column')\n\t\t\t//{\n\t\t\t//if (pChangeData.changes[i].value > some_important_threshold)\n\t\t\t//{\n\t\t\t// Do something\n\t\t\t//}\n\t\t\t//}\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tpostInitialRenderInitialize()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(\n\t\t\t{\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t});\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n},{\"./Pict-Section-TuiGrid-DefaultConfiguration.json\":4,\"./Pict-TuiGrid-Editors.js\":7,\"./Pict-TuiGrid-Formatters.js\":8,\"./Pict-TuiGrid-Headers.js\":9,\"pict-view\":3}],6:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n},{}],7:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\n\nmodule.exports = tuiGridHeaders;\n},{\"./Pict-TuiGrid-Editor-Number.js\":6}],8:[function(require,module,exports){\n// Static functions for formatting data in the grid.\nconst tuiGridFormatters = {};\n\ntuiGridFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = Number.parseFloat(pCell.value).toFixed(2);\n\t\tif (isNaN(tmpCellValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t}\n\ntuiGridFormatters.FormatterCurrencyNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = tuiGridFormatters.FormatterTwoDigitNumber(pCell);\n\t\tif (tmpCellValue == '')\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn `$${tmpCellValue}`;\n\t\t}\n\t}\n\nmodule.exports = tuiGridFormatters;\n},{}],9:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;\n},{}]},{},[5])(5)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n\t\tthis.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n\tstatic isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t: ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t: {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\tif (typeof(pFable.getUUID) == 'function')\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.UUID = `NoFABLESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\n\t\t// Pull back a few things\n\t\tthis.log = this.fable.log;\n\t\tthis.servicesMap = this.fable.servicesMap;\n\t\tthis.services = this.fable.services;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');","const libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: 'DEFAULT',\n\n\t\tInitializeOnLoad: true,\n\t\tRenderOnLoad: false,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tthis.serviceType = 'PictView';\n\n\t\t// Wire in the essential Pict service\n\t\tthis.AppData = this.fable.AppData;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\n\t\t\tif (!tmpRenderable.hasOwnProperty('RenderableHash') || !tmpRenderable.hasOwnProperty('TemplateHash'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable ${i} in the options array.`, tmpRenderable);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.InitializeOnLoad)\n\t\t{\n\t\t\tthis.initialize();\n\t\t}\n\t\tif (this.options.RenderOnLoad)\n\t\t{\n\t\t\tthis.render(this.options.DefaultRenderable, this.options.DefaultDestinationAddress, this.options.DefaultTemplateRecordAddress);\n\t\t\tthis.postInitialRenderInitialize();\n\t\t}\n\t}\n\n\tinternalInitialize()\n\t{\n\t\treturn true;\n\t}\n\n\tpostInitialRenderInitialize()\n\t{\n\t\treturn true;\n\t}\n\n\tinitialize()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\tthis.internalInitialize();\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\tlet tmpContent = this.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\t\treturn this.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t}\n\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\tthis.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t(pError, pContent) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\t\t\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\treturn fCallback(null, pContent);\n\t\t\t});\n\t}\n}\n\nmodule.exports = PictView;","module.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}","const libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.customFormatters = require('./Pict-TuiGrid-Formatters.js');\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\t// Overload the connectTuiGrid() function to use the inline version of the TuiGrid\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\t//if (pChangeData.changes[i].columnName == 'some_important_column')\n\t\t\t//{\n\t\t\t//if (pChangeData.changes[i].value > some_important_threshold)\n\t\t\t//{\n\t\t\t// Do something\n\t\t\t//}\n\t\t\t//}\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tpostInitialRenderInitialize()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(\n\t\t\t{\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t});\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');","// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;","const tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\n\nmodule.exports = tuiGridHeaders;","// Static functions for formatting data in the grid.\nconst tuiGridFormatters = {};\n\ntuiGridFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = Number.parseFloat(pCell.value).toFixed(2);\n\t\tif (isNaN(tmpCellValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t}\n\ntuiGridFormatters.FormatterCurrencyNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = tuiGridFormatters.FormatterTwoDigitNumber(pCell);\n\t\tif (tmpCellValue == '')\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn `$${tmpCellValue}`;\n\t\t}\n\t}\n\nmodule.exports = tuiGridFormatters;","const tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;"]}