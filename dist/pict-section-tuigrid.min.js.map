{"version":3,"sources":["pict-section-tuigrid.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","node_modules/pict-view/source/Pict-View.js","source/Pict-Section-TuiGrid-DefaultConfiguration.json","source/Pict-Section-TuiGrid.js","source/Pict-TuiGrid-Editor-Number.js","source/Pict-TuiGrid-Editor-Text.js","source/Pict-TuiGrid-Editors.js","source/Pict-TuiGrid-Headers.js"],"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","f","exports","module","define","amd","window","global","self","this","PictSectionTuigrid","n","o","c","require","u","a","Error","code","p","length","FableServiceProviderBase","constructor","pFable","pOptions","pServiceHash","isFable","connectFable","fable","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","super","assign","JSON","parse","stringify","pict","AppData","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","tmpRenderable","addRenderable","pRenderableHash","pTemplateHash","pDefaultTemplateRecordAddress","pDefaultDestinationAddress","pRenderMethod","RenderableHash","TemplateHash","ContentDestinationAddress","RenderMethod","LogNoisiness","trace","onBeforeInitialize","onBeforeInitializeAsync","fCallback","onInitialize","onInitializeAsync","initialize","LogControlFlow","warn","onAfterInitialize","getTimeStamp","initializeAsync","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","bind","onAfterInitializeAsync","wait","pError","onBeforeRender","pRenderable","pRenderDestinationAddress","pRecord","onBeforeRenderAsync","render","pTemplateRecordAddress","tmpRenderableHash","tmpRecordAddress","tmpRecord","tmpRenderDestinationAddress","DataProvider","getDataByAddress","undefined","tmpContent","parseTemplateByHash","ContentAssignment","appendContent","prependContent","getElement","assignContent","onAfterRender","renderAsync","tmpCallback","Name","newAnticipate","fOnBeforeRenderCallback","fAsyncTemplateCallback","pContent","fOnAfterRenderCallback","onAfterRenderAsync","renderDefaultAsync","onBeforeSolve","onBeforeSolveAsync","onSolve","onSolveAsync","solve","onAfterSolve","solveAsync","onAfterSolveAsync","onBeforeMarshalFromView","onBeforeMarshalFromViewAsync","onMarshalFromView","onMarshalFromViewAsync","marshalFromView","onAfterMarshalFromView","marshalFromViewAsync","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onBeforeMarshalToViewAsync","onMarshalToView","onMarshalToViewAsync","marshalToView","onAfterMarshalToView","marshalToViewAsync","onAfterMarshalToViewAsync","isPictView","RenderOnLoad","GridWidth","GridRowHeight","GridBodyHeight","GridBodyMinHeight","GridColumnMinWidth","GridColumnWidthResizable","GridColumnHeightResizable","GridColumnFrozenCount","GridColumnFrozenBorderWidth","GridScrollX","GridScrollY","GridShowDummyRows","GridDraggableRows","GridSelectionUnit","DestinationAddress","TargetElementAddress","GridDataAddress","GridData","idrecord","entity","name","description","ColumnsToSolveOnChange","TuiColumnSchema","header","PictTriggerSolveOnChange","editor","libPictViewClass","dateFormatter","initialRenderComplete","customFormatters","_tuiGridPrototype","tuiGrid","customHeaders","customEditors","initializeCustomFormatters","columnSchema","targetElementAddress","gridData","FormatterTwoDigitNumber","pCell","_pCell$decimalPrecisi","tmpCellValue","parseFloat","tmpPrecision","decimalPrecision","isNaN","roundPrecise","FormatterCurrencyNumber","_pCell$decimalPrecisi2","DataFormat","formatterDollars","FormatterRoundedNumber","_pCell$decimalPrecisi3","FormatterDate","tmpDate","tmpDates","dayJS","utc","dateformat","format","connectTuiGridPrototype","pTuiGridPrototype","tui","Grid","preChangeHandler","pChangeData","changeHandler","tmpSolverNecessary","changes","tmpEntity","instance","getValue","rowKey","tmpIDRecord","hasOwnProperty","columnName","PictApplication","onAfterInitialRender","tmpAddressedData","manifest","getValueByHash","tmpTargetElementSet","targetElement","tmpColumn","formatter","type","listItems","tmpListItems","Options","gridSettings","data","el","columns","usageStatistics","scrollY","columnOptions","resizable","customConfigureGridSettings","libTuiGrid","on","SetGridValue","pCellColumnToBeSet","pCellValueToSet","pLookupValue","pLookupColumn","tmpData","getData","setValue","SetGridValueByRowKey","pRowKey","default_configuration","pProperties","tmpElement","document","createElement","columnInfo","oninput","pElement","tmpCastNumber","target","toFixed","toString","Element","mounted","select","placeholder","pattern","minLength","maxLength","required","tuiGridHeaders","EditorNumber","EditorText","CustomColumnHeaderNone"],"mappings":"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","file":"pict-section-tuigrid.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictSectionTuigrid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{}],2:[function(require,module,exports){\n\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {string} [RenderMethod] - The method to use when rendering the renderable ('replace', 'append', 'prepend', 'append_once').\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {string} [pRenderMethod] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {any} [pRenderable] - The renderable that will be rendered.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {any} [pRecord] - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this])\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string | ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string | ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string | ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tfalse;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {any} [pRenderable] - The renderable that was rendered.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable was rendered.\n\t * @param {any} [pRecord] - The record (data) that was used by the renderable.\n\t * @param {string} [pContent] - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n\n},{\"fable-serviceproviderbase\":1}],3:[function(require,module,exports){\nmodule.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n},{}],4:[function(require,module,exports){\nconst libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis.dateFormatter = this.fable.instantiateServiceProviderWithoutRegistration('Dates');\n\n\t\tthis.initialRenderComplete = false;\n\n\t\tthis.customFormatters = {};\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.initializeCustomFormatters();\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\tinitializeCustomFormatters()\n\t{\n\t\tthis.customFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\t\tthis.customFormatters.FormatterCurrencyNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tlet tmpCellValue = this.fable.DataFormat.formatterDollars(pCell.value, tmpPrecision);\n\t\t\t\treturn tmpCellValue;\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterRoundedNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterDate = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpDate = tmpDates.dayJS.utc(pCell.value);\n\t\t\t\tif (pCell.dateformat)\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format(pCell.dateformat);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format();\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\t/**\n\t * Construct a tuiGrid instance and connect it to the browser's dom object for the grid.  If the\n\t * prototype is not passed in, try to find a window.tui (where the library puts itself) in the window \n\t * object.\n\t * \n\t * @param {object} pTuiGridPrototype - The TuiGrid prototype class expected to be loaded in the browser \n\t * @returns \n\t */\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {Object} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tonAfterRender()\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) => { this.preChangeHandler(pChangeData); });\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\t/**\n\t * This is expected to be overloaded with anything that needs to be added to the grid configuration\n\t * before the Toast UI Grid component is initialized in the browser.\n\t */\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by value and pull the value from the map into the browser.\n\t * \n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t * \n\t * The best practice has been to have a hidden column behind the tuigrid that maps the correct entity\n\t * value set to the record in the map (e.g. IDRecord in one column and Entity in another).\n\t * \n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set \n\t * @param {string} pLookupValue - the Value to look up in tuigrid\n\t * @param {string} pLookupColumn - the key of the column in the tuigrid record (which are plain javascript objects defined by the tuigrid config)\n\t * @returns \n\t */\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by row key and pull in a column.\n\t * \n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t * \n\t * \n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set \n\t * @param {string} pRowKey - the key of the row to be set\n\t * @returns \n\t */\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n\n},{\"./Pict-Section-TuiGrid-DefaultConfiguration.json\":3,\"./Pict-TuiGrid-Editors.js\":7,\"./Pict-TuiGrid-Headers.js\":8,\"pict-view\":2}],5:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n},{}],6:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorText\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\ttmpElement.type = 'text';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.placeholder =  pProperties.columnInfo.editor.options.placeholder || '';\n\t\ttmpElement.pattern = pProperties.columnInfo.editor.options.pattern || '';\n\t\ttmpElement.minLength = pProperties.columnInfo.editor.options.minLength || '';\n\t\ttmpElement.maxLength = pProperties.columnInfo.editor.options.maxLength || '';\n\t\ttmpElement.required = pProperties.columnInfo.editor.options.required || '';\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorText;\n\n},{}],7:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\ntuiGridHeaders.EditorText = require('./Pict-TuiGrid-Editor-Text.js');\n\nmodule.exports = tuiGridHeaders;\n\n},{\"./Pict-TuiGrid-Editor-Number.js\":5,\"./Pict-TuiGrid-Editor-Text.js\":6}],8:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;\n},{}]},{},[4])(4)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {string} [RenderMethod] - The method to use when rendering the renderable ('replace', 'append', 'prepend', 'append_once').\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {string} [pRenderMethod] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {any} [pRenderable] - The renderable that will be rendered.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {any} [pRecord] - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this])\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string | ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string | ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string | ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tfalse;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {any} [pRenderable] - The renderable that was rendered.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable was rendered.\n\t * @param {any} [pRecord] - The record (data) that was used by the renderable.\n\t * @param {string} [pContent] - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : false;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) => \n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError)\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n","module.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}","const libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis.dateFormatter = this.fable.instantiateServiceProviderWithoutRegistration('Dates');\n\n\t\tthis.initialRenderComplete = false;\n\n\t\tthis.customFormatters = {};\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.initializeCustomFormatters();\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\tinitializeCustomFormatters()\n\t{\n\t\tthis.customFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\t\tthis.customFormatters.FormatterCurrencyNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tlet tmpCellValue = this.fable.DataFormat.formatterDollars(pCell.value, tmpPrecision);\n\t\t\t\treturn tmpCellValue;\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterRoundedNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterDate = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpDate = tmpDates.dayJS.utc(pCell.value);\n\t\t\t\tif (pCell.dateformat)\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format(pCell.dateformat);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format();\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\t/**\n\t * Construct a tuiGrid instance and connect it to the browser's dom object for the grid.  If the\n\t * prototype is not passed in, try to find a window.tui (where the library puts itself) in the window \n\t * object.\n\t * \n\t * @param {object} pTuiGridPrototype - The TuiGrid prototype class expected to be loaded in the browser \n\t * @returns \n\t */\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {Object} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tonAfterRender()\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) => { this.preChangeHandler(pChangeData); });\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\t/**\n\t * This is expected to be overloaded with anything that needs to be added to the grid configuration\n\t * before the Toast UI Grid component is initialized in the browser.\n\t */\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by value and pull the value from the map into the browser.\n\t * \n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t * \n\t * The best practice has been to have a hidden column behind the tuigrid that maps the correct entity\n\t * value set to the record in the map (e.g. IDRecord in one column and Entity in another).\n\t * \n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set \n\t * @param {string} pLookupValue - the Value to look up in tuigrid\n\t * @param {string} pLookupColumn - the key of the column in the tuigrid record (which are plain javascript objects defined by the tuigrid config)\n\t * @returns \n\t */\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by row key and pull in a column.\n\t * \n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t * \n\t * \n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set \n\t * @param {string} pRowKey - the key of the row to be set\n\t * @returns \n\t */\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;","// Custom number editor class with an option for precision\nclass tuiCustomEditorText\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\ttmpElement.type = 'text';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.placeholder =  pProperties.columnInfo.editor.options.placeholder || '';\n\t\ttmpElement.pattern = pProperties.columnInfo.editor.options.pattern || '';\n\t\ttmpElement.minLength = pProperties.columnInfo.editor.options.minLength || '';\n\t\ttmpElement.maxLength = pProperties.columnInfo.editor.options.maxLength || '';\n\t\ttmpElement.required = pProperties.columnInfo.editor.options.required || '';\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorText;\n","const tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\ntuiGridHeaders.EditorText = require('./Pict-TuiGrid-Editor-Text.js');\n\nmodule.exports = tuiGridHeaders;\n","const tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;"]}