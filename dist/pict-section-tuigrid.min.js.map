{"version":3,"sources":["pict-section-tuigrid.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase-Preinit.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","node_modules/pict-view/source/Pict-View.js","source/Pict-Section-TuiGrid-DefaultConfiguration.json","source/Pict-Section-TuiGrid.js","source/Pict-TuiGrid-Editor-Number.js","source/Pict-TuiGrid-Editors.js","source/Pict-TuiGrid-Formatters.js","source/Pict-TuiGrid-Headers.js"],"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","f","exports","module","define","amd","window","global","self","this","PictSectionTuigrid","r","e","n","t","o","i","c","require","u","a","Error","code","p","length","FableCoreServiceProviderBase","constructor","pOptions","pServiceHash","fable","options","serviceType","UUID","concat","Math","floor","random","Hash","connectFable","pFable","FableServiceProviderBase","isFable","getUUID","log","servicesMap","services","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","InitializeOnLoad","RenderOnLoad","Templates","DefaultTemplates","Renderables","Manifests","super","assign","JSON","parse","stringify","AppData","tmpTemplate","hasOwnProperty","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","renderables","tmpRenderable","RenderableHash","initialize","render","postInitialRenderInitialize","internalInitialize","info","pRenderable","pRenderDestinationAddress","pTemplateDataAddress","tmpRenderableHash","tmpRenderDestinationAddress","ContentDestinationAddress","tmpDataAddress","RecordAddress","tmpData","DataProvider","getDataByAddress","tmpContent","parseTemplateByHash","TemplateHash","ContentAssignment","assignContent","renderAsync","fCallback","pError","pContent","GridWidth","GridRowHeight","GridBodyHeight","GridBodyMinHeight","GridColumnMinWidth","GridColumnWidthResizable","GridColumnHeightResizable","GridColumnFrozenCount","GridColumnFrozenBorderWidth","GridScrollX","GridScrollY","GridShowDummyRows","GridDraggableRows","GridSelectionUnit","DestinationAddress","TargetElementAddress","GridDataAddress","GridData","idrecord","entity","name","description","ColumnsToSolveOnChange","TuiColumnSchema","header","PictTriggerSolveOnChange","editor","libPictViewClass","_tuiGridPrototype","tuiGrid","customHeaders","customEditors","customFormatters","columnSchema","targetElementAddress","gridData","connectTuiGridPrototype","pTuiGridPrototype","trace","tui","Grid","changeHandler","pChangeData","tmpSolverNecessary","changes","tmpEntity","instance","getValue","rowKey","tmpIDRecord","columnName","PictApplication","solve","tmpAddressedData","manifest","getValueByHash","tmpTargetElementSet","getElement","targetElement","tmpColumn","formatter","type","listItems","tmpListItems","Options","warn","gridSettings","data","el","columns","usageStatistics","scrollY","columnOptions","resizable","customConfigureGridSettings","libTuiGrid","on","SetGridValue","pCellColumnToBeSet","pCellValueToSet","pLookupValue","pLookupColumn","console","getData","setValue","SetGridValueByRowKey","pRowKey","default_configuration","pProperties","tmpElement","document","createElement","decimalPrecision","columnInfo","oninput","pElement","tmpCastNumber","parseFloat","target","toFixed","toString","Element","mounted","select","tuiGridHeaders","EditorNumber","tuiGridFormatters","pCell","tmpCellValue","isNaN","FormatterTwoDigitNumber","CustomColumnHeaderNone"],"mappings":"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","file":"pict-section-tuigrid.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictSectionTuigrid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n\t\tthis.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n\tstatic isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t: ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t: {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\tif (typeof(pFable.getUUID) == 'function')\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.UUID = `NoFABLESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\n\t\t// Pull back a few things\n\t\tthis.log = this.fable.log;\n\t\tthis.servicesMap = this.fable.servicesMap;\n\t\tthis.services = this.fable.services;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');\n},{\"./Fable-ServiceProviderBase-Preinit.js\":1}],3:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: 'DEFAULT',\n\n\t\tInitializeOnLoad: true,\n\t\tRenderOnLoad: false,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tthis.serviceType = 'PictView';\n\n\t\t// Wire in the essential Pict service\n\t\tthis.AppData = this.fable.AppData;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\n\t\t\tif (!tmpRenderable.hasOwnProperty('RenderableHash') || !tmpRenderable.hasOwnProperty('TemplateHash'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable ${i} in the options array.`, tmpRenderable);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.InitializeOnLoad)\n\t\t{\n\t\t\tthis.initialize();\n\t\t}\n\t\tif (this.options.RenderOnLoad)\n\t\t{\n\t\t\tthis.render(this.options.DefaultRenderable, this.options.DefaultDestinationAddress, this.options.DefaultTemplateRecordAddress);\n\t\t\tthis.postInitialRenderInitialize();\n\t\t}\n\t}\n\n\tinternalInitialize()\n\t{\n\t\treturn true;\n\t}\n\n\tpostInitialRenderInitialize()\n\t{\n\t\treturn true;\n\t}\n\n\tinitialize()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\tthis.internalInitialize();\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\tlet tmpContent = this.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\t\treturn this.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t}\n\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\tthis.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t(pError, pContent) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\t\t\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\treturn fCallback(null, pContent);\n\t\t\t});\n\t}\n}\n\nmodule.exports = PictView;\n},{\"fable-serviceproviderbase\":2}],4:[function(require,module,exports){\nmodule.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n},{}],5:[function(require,module,exports){\nconst libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.customFormatters = require('./Pict-TuiGrid-Formatters.js');\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\t// Overload the connectTuiGrid() function to use the inline version of the TuiGrid\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\t//if (pChangeData.changes[i].columnName == 'some_important_column')\n\t\t\t//{\n\t\t\t//if (pChangeData.changes[i].value > some_important_threshold)\n\t\t\t//{\n\t\t\t// Do something\n\t\t\t//}\n\t\t\t//}\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tpostInitialRenderInitialize()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n},{\"./Pict-Section-TuiGrid-DefaultConfiguration.json\":4,\"./Pict-TuiGrid-Editors.js\":7,\"./Pict-TuiGrid-Formatters.js\":8,\"./Pict-TuiGrid-Headers.js\":9,\"pict-view\":3}],6:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n},{}],7:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\n\nmodule.exports = tuiGridHeaders;\n},{\"./Pict-TuiGrid-Editor-Number.js\":6}],8:[function(require,module,exports){\n// Static functions for formatting data in the grid.\nconst tuiGridFormatters = {};\n\ntuiGridFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = Number.parseFloat(pCell.value).toFixed(2);\n\t\tif (isNaN(tmpCellValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t}\n\ntuiGridFormatters.FormatterCurrencyNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = tuiGridFormatters.FormatterTwoDigitNumber(pCell);\n\t\tif (tmpCellValue == '')\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn `$${tmpCellValue}`;\n\t\t}\n\t}\n\nmodule.exports = tuiGridFormatters;\n},{}],9:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;\n},{}]},{},[5])(5)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n\t\tthis.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n\tstatic isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t: ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t: {};\n\n\t\tthis.serviceType = 'Unknown';\n\n\t\tif (typeof(pFable.getUUID) == 'function')\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.UUID = `NoFABLESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\n\t\t// Pull back a few things\n\t\tthis.log = this.fable.log;\n\t\tthis.servicesMap = this.fable.servicesMap;\n\t\tthis.services = this.fable.services;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');","const libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: 'DEFAULT',\n\n\t\tInitializeOnLoad: true,\n\t\tRenderOnLoad: false,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tthis.serviceType = 'PictView';\n\n\t\t// Wire in the essential Pict service\n\t\tthis.AppData = this.fable.AppData;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.fable.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\n\t\t\tif (!tmpRenderable.hasOwnProperty('RenderableHash') || !tmpRenderable.hasOwnProperty('TemplateHash'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable ${i} in the options array.`, tmpRenderable);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.InitializeOnLoad)\n\t\t{\n\t\t\tthis.initialize();\n\t\t}\n\t\tif (this.options.RenderOnLoad)\n\t\t{\n\t\t\tthis.render(this.options.DefaultRenderable, this.options.DefaultDestinationAddress, this.options.DefaultTemplateRecordAddress);\n\t\t\tthis.postInitialRenderInitialize();\n\t\t}\n\t}\n\n\tinternalInitialize()\n\t{\n\t\treturn true;\n\t}\n\n\tpostInitialRenderInitialize()\n\t{\n\t\treturn true;\n\t}\n\n\tinitialize()\n\t{\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\tthis.internalInitialize();\n\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\tlet tmpContent = this.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\t\treturn this.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t}\n\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t(typeof (tmpRenderable.RecordAddress) === 'string') ? tmpRenderable.RecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\tlet tmpData = (typeof (tmpDataAddress) === 'string') ? this.fable.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\tthis.fable.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t(pError, pContent) =>\n\t\t\t{\n\t\t\t\tif (pError)\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\treturn fCallback(pError);\n\t\t\t\t}\n\t\t\t\tthis.fable.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\treturn fCallback(null, pContent);\n\t\t\t});\n\t}\n}\n\nmodule.exports = PictView;","module.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}","const libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.customFormatters = require('./Pict-TuiGrid-Formatters.js');\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\t// Overload the connectTuiGrid() function to use the inline version of the TuiGrid\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\t//if (pChangeData.changes[i].columnName == 'some_important_column')\n\t\t\t//{\n\t\t\t//if (pChangeData.changes[i].value > some_important_threshold)\n\t\t\t//{\n\t\t\t// Do something\n\t\t\t//}\n\t\t\t//}\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tpostInitialRenderInitialize()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');","// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;","const tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\n\nmodule.exports = tuiGridHeaders;","// Static functions for formatting data in the grid.\nconst tuiGridFormatters = {};\n\ntuiGridFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = Number.parseFloat(pCell.value).toFixed(2);\n\t\tif (isNaN(tmpCellValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t}\n\ntuiGridFormatters.FormatterCurrencyNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = tuiGridFormatters.FormatterTwoDigitNumber(pCell);\n\t\tif (tmpCellValue == '')\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn `$${tmpCellValue}`;\n\t\t}\n\t}\n\nmodule.exports = tuiGridFormatters;","const tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;"]}